# Internal filename: install.py
# Bytecode version: 3.12.0rc2 (3531)
import sys
import os
import base64
import zipfile
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
import pygame
import ctypes
import ttkbootstrap as tb
from PIL import Image, ImageTk, ImageSequence
import winreg
import subprocess

def run_as_admin():
    if sys.platform == 'win32':
        if ctypes.windll.shell32.IsUserAnAdmin():
            return
        ctypes.windll.shell32.ShellExecuteW(None, 'runas', sys.executable, ' '.join(sys.argv), None, 1)
        sys.exit()
    else:  # inserted
        if sys.platform == 'darwin':
            if os.geteuid()!= 0:
                script = f'do shell script \"{sys.executable} {sys.argv[0]}\" with administrator privileges'
                os.system(f'osascript -e \'{script}\'')
                sys.exit()
run_as_admin()
encoded_data = b''

def get_default_install_path():
    return '/Library/Application Support/Adobe/CEP/extensions' if sys.platform == 'darwin' else 'C:\\Program Files (x86)\\Common Files\\Adobe\\CEP\\extensions'

def get_resource_path(relative_path):
    """Возвращает правильный путь к файлу внутри .exe"""  # inserted
    if getattr(sys, 'frozen', False):
        base_path = sys._MEIPASS
    else:  # inserted
        base_path = os.path.abspath('.')
    return os.path.join(base_path, relative_path)

def extract_files(destination):
    try:
        zip_path = os.path.join(destination, 'package.zip')
        with open(zip_path, 'wb') as f:
            pass  # postinserted
    except Exception as e:
            f.write(base64.b64decode(encoded_data))
                with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                    zip_ref.extractall(destination)
                        os.remove(zip_path)
                        return True
            messagebox.showerror('Ошибка', f'Ошибка распаковки: {e}')
            return False

def get_csxs_versions_windows():
    csxs_versions = []
    try:
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, 'Software\\Adobe') as adobe_key:
            pass  # postinserted
    except OSError:
            i = 0
            while True:
                subkey_name = winreg.EnumKey(adobe_key, i)
                if subkey_name.startswith('CSXS.'):
                    csxs_versions.append(subkey_name)
                i += 1
        else:  # inserted
            return csxs_versions
        break

def get_csxs_versions_mac():
    try:
        output = subprocess.check_output(['defaults', 'read', 'com.adobe.CSXS'], stderr=subprocess.DEVNULL)
        return [line.split()[0] for line in output.decode().split('\n') if line.startswith('CSXS.')]
    except Exception:
        return []
    else:  # inserted
        try:
            pass  # postinserted
        pass

def set_player_debug_mode():
    try:
        if sys.platform == 'darwin':
            csxs_versions = get_csxs_versions_mac()
            for version in csxs_versions:
                os.system(f'defaults write com.adobe.{version} PlayerDebugMode 1')
        else:  # inserted
            csxs_versions = get_csxs_versions_windows()
            for version in csxs_versions:
                os.system(f'reg add \"HKCU\\Software\\Adobe\\{version}\" /v PlayerDebugMode /t REG_DWORD /d 1 /f')
        print(f'✅ PlayerDebugMode включен для {len(csxs_versions)} версий CSXS: {csxs_versions}')
        return True
    except Exception as e:
        print(f'❌ Ошибка установки PlayerDebugMode: {e}')
        return False

def install():
    install_path = path_var.get()
    if not os.path.exists(install_path):
        os.makedirs(install_path, exist_ok=True)
    success = extract_files(install_path)
    if debug_var.get():
        set_player_debug_mode()
    if success:
        messagebox.showinfo('✅ Успешно', f'Файлы установлены в: {install_path}')
        root.quit()

def browse_path():
    folder = filedialog.askdirectory()
    if folder:
        path_var.set(folder)

def animate_background(frame_index):
    frame = gif_frames[frame_index]
    bg_label.configure(image=frame)
    root.after(30, lambda: animate_background((frame_index + 1) % len(gif_frames)))
icon_data = b'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'
icon_path = 'temp_icon.ico'
with open(icon_path, 'wb') as icon_file:
    icon_file.write(base64.b64decode(icon_data))
root = tb.Window(themename='superhero')
root.iconbitmap(icon_path)
root.title('Установщик AutoSlot')
root.geometry('600x400')
root.resizable(False, False)
gif_path = get_resource_path('background.gif')
image = Image.open(gif_path)
gif_frames = [ImageTk.PhotoImage(frame.convert('RGBA')) for frame in ImageSequence.Iterator(image)]
bg_label = tk.Label(root)
bg_label.place(x=0, y=0, relwidth=1, relheight=1)
animate_background(0)
frame = ttk.Frame(root, padding=10)
frame.place(relx=0.5, rely=0.5, anchor='center')
ttk.Label(frame, text='Выбери путь куда распакуем AutoSlot', font=('Arial', 12)).pack(pady=5)
path_var = tk.StringVar(value=get_default_install_path())
path_frame = ttk.Frame(frame)
path_frame.pack(fill='x')
path_entry = ttk.Entry(path_frame, textvariable=path_var, width=40)
path_entry.pack(side='left', padx=5, expand=True, fill='x')
browse_btn = ttk.Button(path_frame, text='📁 Обзор', command=browse_path)
browse_btn.pack(side='right')
debug_var = tk.BooleanVar(value=True)
debug_checkbox = ttk.Checkbutton(frame, text='Required (PlayerDebugMode = 1)', variable=debug_var)
debug_checkbox.pack(pady=10)
install_btn = ttk.Button(frame, text='🚀 Установить', command=lambda: threading.Thread(target=install).start())
install_btn.pack(pady=20)

def play_music():
    pygame.mixer.init()
    pygame.mixer.music.load(get_resource_path('audio.mp3'))
    pygame.mixer.music.play((-1))
threading.Thread(target=play_music, daemon=True).start()
root.mainloop()
